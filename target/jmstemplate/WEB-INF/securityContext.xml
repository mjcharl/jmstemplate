<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">
        
	<http auto-config="false" >
		<intercept-url pattern="/user/**" access="hasRole('ROLE_ADMIN')" />
		<session-management>
			<concurrency-control max-sessions="1" />
		</session-management>
		<form-login  />
		<logout delete-cookies="JSESSIONID" invalidate-session="true" logout-success-url="/logoutpage"/>
		<csrf disabled="true"/>
	</http>
	
	<!-- Non database authentication set up, useful for testing -->
	<!--
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="password" authorities="ROLE_ADMIN,ROLE_USER" />
				<user name="user" password="password" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	-->

	<authentication-manager>
		<authentication-provider user-service-ref='myUserDetailsService' />
	</authentication-manager>

	<!-- Configure the jdbcDao to work with a Users and Roles many to many relationship -->
	<beans:bean id="myUserDetailsService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="authoritiesByUsernameQuery" value="select u.username, r.role_name as authority from users u, users_roles ur, roles r where r.id = ur.role_id and   u.id = ur.user_id and u.username = ?" />
	</beans:bean>
	


</beans:beans>